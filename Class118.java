/* Class118 - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */

final class Class118 {
	static int anInt1133;
	static boolean aBoolean1134;
	static Player[] playersList = new Player[2048];
	static short[][] aShortArrayArray1136;
	static String aString1137;
	static Class107[] aClass107Array1138;

	static {
		aBoolean1134 = true;
		anInt1133 = 0;
		aString1137 = "white:";
		aShortArrayArray1136 = new short[][] {
				{ 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026,
						-13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556,
						10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006,
						-21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146,
						-18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550,
						10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130,
						21150, -28918, -28898, -22006, -21986, -12918, -12898 },
				{ 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026,
						-13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556,
						10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006,
						-21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146,
						-18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10347, 10582, 10429, 10407, 10359, 8414, 9540, 10456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026,
						-13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556,
						10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006,
						-21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146,
						-18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550,
						10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130,
						21150, -28918, -28898, -22006, -21986, -12918, -12898 },
				{ 4300, 3294, 3303, 3264, 4506, 4382, 4387, 5293, 7622, 7384, 8412, 7496, 86, 123, 111, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556,
						940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522,
						542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140,
						20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 13766, 13745,
						13726, 13890, 13743, 13852, 17602, 18605, 21660, 24000, 24997, 24088, 27972, 25903, 26904, 27193, 27175, 27156, 30020, 28975, 29976, 12482, 13485, 10392, 10692, 10669, 10776, 6717, 6695, 7830, 6971, 6951, 5910, 3389, 3369, 3356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026,
						-13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556,
						10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006,
						-21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550, 10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146,
						-18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130, 21150, -28918, -28898, -22006, -21986, -12918, -12898, 10, 30, 50, 70, 90, 110, 310, 684, 704, 556, 940, 960, 6454, 6952, 6972, 2358, 2732, 2752, 10550,
						10924, 10944, 10310, 10556, 10576, 14646, 15020, 15040, 19766, 20140, 20160, -29386, -29012, -28992, 31030, 31276, 31296, -24266, -23892, -23872, -19146, -18772, -18752, -14026, -13652, -13632, -6858, -6484, -6464, 522, 542, 6794, 6814, 11018, 11038, 14986, 15006, 21130,
						21150, -28918, -28898, -22006, -21986, -12918, -12898 } };
	}

	static final Class36 method1022(final int i, final int i_0_, final int i_1_) {
		final GroundTile class120_sub18 = Class120_Sub1.groundTiles[i][i_0_][i_1_];
		if (class120_sub18 == null) {
			return null;
		}
		final Class36 class36 = class120_sub18.aClass36_2650;
		class120_sub18.aClass36_2650 = null;
		return class36;
	}

	public static void method1023(final int i) {
		try {
			aString1137 = null;
			aShortArrayArray1136 = null;
			playersList = null;
			aClass107Array1138 = null;
		} catch (final RuntimeException runtimeexception) {
			throw Class120_Sub14_Sub2.method1428(runtimeexception, new StringBuilder("nc.D(").append(i).append(')').toString());
		}
	}

	static final void method1024(final int i, final Buffer class120_sub7) {
		try {
			final int i_2_ = Class79.anInt697 >> 2 << 10;
			final int i_3_ = Class79.anInt699 >> 1;
			final byte[][] is = new byte[Class79.anInt700][Class79.anInt692];
			while (class120_sub7.buf.length > class120_sub7.pos) {
				boolean bool = false;
				int i_4_ = 0;
				int i_5_ = 0;
				if (class120_sub7.getUByte() == 1) {
					bool = true;
					i_5_ = class120_sub7.getUByte();
					i_4_ = class120_sub7.getUByte();
				}
				final int i_6_ = class120_sub7.getUByte();
				final int i_7_ = class120_sub7.getUByte();
				final int i_8_ = 64 * i_6_ + -Class79.anInt695;
				final int i_9_ = -1 + Class79.anInt692 + Class79.anInt694 + -(64 * i_7_);
				if (i_8_ < 0 || -63 + i_9_ < 0 || i_8_ + 63 >= Class79.anInt700 || i_9_ >= Class79.anInt692) {
					if (!bool) {
						class120_sub7.pos += 4096;
					} else {
						class120_sub7.pos += 64;
					}
				} else {
					for (int i_10_ = 0; i_10_ < 64; i_10_++) {
						final byte[] is_11_ = is[i_8_ - -i_10_];
						for (int i_12_ = 0; i_12_ < 64; i_12_++) {
							if (!bool || i_10_ >= 8 * i_5_ && i_10_ < 8 + i_5_ * 8 && i_12_ >= i_4_ * 8 && i_12_ < 8 * i_4_ - -8) {
								is_11_[-i_12_ + i_9_] = class120_sub7.getByte();
							}
						}
					}
				}
			}
			if (i == 7383) {
				final int i_13_ = Class79.anInt700;
				final int i_14_ = Class79.anInt692;
				final int[] is_15_ = new int[i_14_];
				final int[] is_16_ = new int[i_14_];
				final int[] is_17_ = new int[i_14_];
				final int[] is_18_ = new int[i_14_];
				final int[] is_19_ = new int[i_14_];
				for (int i_20_ = -5; i_13_ > i_20_; i_20_++) {
					if ((i_20_ & 0x1ff) == 0) {
						Class120_Sub12_Sub29.ping(true);
					}
					for (int i_21_ = 0; i_14_ > i_21_; i_21_++) {
						final int i_22_ = 5 + i_20_;
						if (i_13_ > i_22_) {
							final int i_23_ = 0xff & is[i_22_][i_21_];
							if (i_23_ > 0) {
								final Class128 class128 = MouseHandler.method1026(-1 + i_23_, true);
								is_15_[i_21_] += class128.anInt1218;
								is_16_[i_21_] += class128.anInt1222;
								is_17_[i_21_] += class128.anInt1229;
								is_18_[i_21_] += class128.anInt1226;
								is_19_[i_21_]++;
							}
						}
						final int i_24_ = i_20_ + -5;
						if (i_24_ >= 0) {
							final int i_25_ = is[i_24_][i_21_] & 0xff;
							if (i_25_ > 0) {
								final Class128 class128 = MouseHandler.method1026(-1 + i_25_, true);
								is_15_[i_21_] -= class128.anInt1218;
								is_16_[i_21_] -= class128.anInt1222;
								is_17_[i_21_] -= class128.anInt1229;
								is_18_[i_21_] -= class128.anInt1226;
								is_19_[i_21_]--;
							}
						}
					}
					if (i_20_ >= 0) {
						int i_26_ = 0;
						final int[][] is_27_ = Class79.anIntArrayArrayArray713[i_20_ >> 6];
						int i_28_ = 0;
						int i_29_ = 0;
						int i_30_ = 0;
						int i_31_ = 0;
						for (int i_32_ = -5; i_32_ < i_14_; i_32_++) {
							final int i_33_ = i_32_ + 5;
							if (i_33_ < i_14_) {
								i_26_ += is_15_[i_33_];
								i_30_ += is_18_[i_33_];
								i_28_ += is_16_[i_33_];
								i_29_ += is_19_[i_33_];
								i_31_ += is_17_[i_33_];
							}
							final int i_34_ = -5 + i_32_;
							if (i_34_ >= 0) {
								i_26_ -= is_15_[i_34_];
								i_30_ -= is_18_[i_34_];
								i_29_ -= is_19_[i_34_];
								i_28_ -= is_16_[i_34_];
								i_31_ -= is_17_[i_34_];
							}
							if (i_32_ >= 0 && i_29_ > 0) {
								int[] is_35_ = is_27_[i_32_ >> 6];
								final int i_36_ = i_30_ != 0 ? Class120_Sub14_Sub5.method1442((byte) -123, i_26_ * 256 / i_30_, i_28_ / i_29_, i_31_ / i_29_) : 0;
								if (is[i_20_][i_32_] == 0) {
									if (is_35_ != null) {
										is_35_[Class120_Sub12_Sub3.method1207(63, i_20_) + (Class120_Sub12_Sub3.method1207(63, i_32_) << 6)] = 0;
									}
								} else {
									if (is_35_ == null) {
										is_35_ = is_27_[i_32_ >> 6] = new int[4096];
									}
									int i_37_ = i_3_ + (i_36_ & 0x7f);
									if (i_37_ < 0) {
										i_37_ = 0;
									} else if (i_37_ > 127) {
										i_37_ = 127;
									}
									final int i_38_ = (0xfc00 & i_2_ + i_36_) - (-(0x380 & i_36_) - i_37_);
									is_35_[(Class120_Sub12_Sub3.method1207(i_32_, 63) << 6) - -Class120_Sub12_Sub3.method1207(i_20_, 63)] = Rasterizer.anIntArray969[Class178.method2256(true, i_38_, 96)];
								}
							}
						}
					}
				}
			}
		} catch (final RuntimeException runtimeexception) {
			throw Class120_Sub14_Sub2.method1428(runtimeexception, new StringBuilder("nc.B(").append(i).append(',').append(class120_sub7 != null ? "{...}" : "null").append(')').toString());
		}
	}

	static final Class124 method1025(final byte i, final int i_39_) {
		Class124 class124;
		try {
			Class124 class124_40_ = (Class124) Class120_Sub10.aClass21_2542.get(i_39_);
			if (i >= -125) {
				method1025((byte) 70, -4);
			}
			if (class124_40_ != null) {
				return class124_40_;
			}
			final byte[] is = Class101_Sub4.aClass50_2297.getFile(4, i_39_);
			class124_40_ = new Class124();
			if (is != null) {
				class124_40_.method1875(i_39_, new Buffer(is), -1);
			}
			Class120_Sub10.aClass21_2542.put(class124_40_, i_39_);
			class124 = class124_40_;
		} catch (final RuntimeException runtimeexception) {
			throw Class120_Sub14_Sub2.method1428(runtimeexception, new StringBuilder("nc.A(").append(i).append(',').append(i_39_).append(')').toString());
		}
		return class124;
	}
}
